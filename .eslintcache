[{"C:\\Work\\projects\\charlee\\src\\reportWebVitals.js":"1","C:\\Work\\projects\\charlee\\src\\index.js":"2","C:\\Work\\projects\\charlee\\src\\app\\helpers.js":"3","C:\\Work\\projects\\charlee\\src\\app\\gallery\\Gallery.js":"4","C:\\Work\\projects\\charlee\\src\\app\\App.js":"5","C:\\Work\\projects\\charlee\\src\\app\\admin\\Admin.js":"6","C:\\Work\\projects\\charlee\\src\\app\\partials\\loader.js":"7","C:\\Work\\projects\\charlee\\src\\app\\partials\\file-uploader.js":"8","C:\\Work\\projects\\charlee\\src\\app\\gallery\\SubGallery.js":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":597,"mtime":1608410987279,"results":"12","hashOfConfig":"11"},{"size":397,"mtime":1608410950531,"results":"13","hashOfConfig":"11"},{"size":3537,"mtime":1609540698614,"results":"14","hashOfConfig":"11"},{"size":7516,"mtime":1609543205095,"results":"15","hashOfConfig":"11"},{"size":13191,"mtime":1609603468579,"results":"16","hashOfConfig":"11"},{"size":241,"mtime":1608413035776,"results":"17","hashOfConfig":"11"},{"size":4264,"mtime":1609710908280,"results":"18","hashOfConfig":"11"},{"size":6899,"mtime":1609540425564,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"11grl55",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\Work\\projects\\charlee\\src\\reportWebVitals.js",[],["44","45"],"C:\\Work\\projects\\charlee\\src\\index.js",[],["46","47"],"C:\\Work\\projects\\charlee\\src\\app\\helpers.js",[],"C:\\Work\\projects\\charlee\\src\\app\\gallery\\Gallery.js",["48","49","50","51"],"import React, { useEffect, useState } from 'react';\r\nimport './Gallery.css';\r\nimport { SRLWrapper } from \"simple-react-lightbox\";\r\n\r\n\r\nfunction GallerySection(props) {\r\n\r\n  const [pictures, setPictures] = useState([])\r\n\r\n    const [ showSlider, setShowSlider ] = useState(false)\r\n    const [ currentImgIndex, setCurrentImgIndex ] = useState(0)\r\n    const [ isBlurred, setIsBlurred ] = useState(false); \r\n  \r\n    useEffect(() => {\r\n      getPictures()\r\n    },[])\r\n\r\n    function getPictures() {\r\n      fetch('/pictures')\r\n      .then(res => res.text())\r\n      .then(res =>{\r\n        setPictures(JSON.parse(res));\r\n      })\r\n    }\r\n  \r\n    function onGalleryImgClick(img, index){\r\n      setShowSlider(true)\r\n      setCurrentImgIndex(index)\r\n    }\r\n  \r\n    const galleryDisplay = pictures.map((picture, index) => (\r\n      <GalleryImage\r\n          picture={picture}\r\n          index={index}\r\n          onGalleryImgClick={onGalleryImgClick}\r\n          >\r\n      </GalleryImage>\r\n    ))\r\n  \r\n    function onOverlayClick() {\r\n      setShowSlider(false)\r\n    }\r\n      \r\n    let overlayDisplay;\r\n    if(showSlider === true){\r\n      overlayDisplay = (\r\n        <SlideShow\r\n          onOverlayClick={onOverlayClick}\r\n          pictures={pictures}\r\n          currentImgIndex={currentImgIndex}\r\n          setCurrentImgIndex={setCurrentImgIndex}\r\n        />\r\n      )\r\n    }\r\n\r\n    const options={\r\n      thumbnails:{\r\n        showThumbnails:false\r\n      },\r\n      buttons: {\r\n        showDownloadButton: false\r\n      }\r\n    }\r\n\r\n    const callbacks = {\r\n      onSlideChange: object => console.log(object),\r\n      onLightboxOpened: object => setIsBlurred(true),\r\n      onLightboxClosed: object => setIsBlurred(false),\r\n      onCountSlides: object => console.log(object)\r\n  };\r\n  \r\n    let galleryStyle;\r\n    if (isBlurred){\r\n      galleryStyle = {\r\n        filter:\"blur(5px)\"\r\n      }\r\n    }\r\n\r\n    return(\r\n      <section id=\"gallery\"> \r\n        <SRLWrapper \r\n          callbacks={callbacks}\r\n          options={options}>\r\n            <div id=\"gallery-pictures\" style={galleryStyle}>{galleryDisplay}</div>\r\n        </SRLWrapper>\r\n      </section>\r\n    )\r\n  }\r\n\r\n  function GalleryImage(props) {\r\n\r\n    const [isVisible, setIsVisible] = useState(false)\r\n\r\n    function onGalleryImgLoad() {\r\n      setIsVisible(true)            \r\n    }\r\n\r\n    let cssClass = \"gallery-img-item\";\r\n    \r\n    if (isVisible === true) cssClass += \"  is-visible\";\r\n\r\n    return(\r\n        <div className={cssClass}>\r\n          <div className=\"image-container\">\r\n            <img onLoad={onGalleryImgLoad} src={props.picture.filename}/>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n  \r\n  function SlideShow(props) {\r\n\r\n    const [nextIndex, setNextIndex] = useState(null)\r\n\r\n    function onNavButtonClick(value) {\r\n      let indexValue = value;\r\n      if(value < 0) indexValue = props.pictures.length -1;\r\n      else if(value === props.pictures.length) indexValue = 0; \r\n      setNextIndex(indexValue)\r\n      props.setCurrentImgIndex(indexValue)\r\n    }\r\n  \r\n    return(\r\n      <div id=\"overlay\">\r\n        <div id=\"overlay-black\" onClick={props.onOverlayClick}></div>\r\n         <div id=\"slideshow\">\r\n           <div className=\"nav-button left\" onClick={() => onNavButtonClick(props.currentImgIndex -1)}></div>\r\n            <img src={props.pictures[props.currentImgIndex].filename}/>\r\n            <div className=\"nav-button right\" onClick={() => onNavButtonClick(props.currentImgIndex +1)}></div>\r\n         </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n  export default GallerySection;","C:\\Work\\projects\\charlee\\src\\app\\App.js",["52","53","54","55","56","57","58","59"],"C:\\Work\\projects\\charlee\\src\\app\\admin\\Admin.js",["60","61","62","63","64","65","66","67","68","69","70"],"import React, {useState, useEffect} from 'react';\r\nimport './Admin.css';\r\nimport FileUploader from '../partials/file-uploader';\r\nimport $ from 'jquery';\r\nimport { Button, Header, Icon, Modal, Message } from 'semantic-ui-react';\r\n\r\n\r\n\r\nfunction Admin(props) {\r\n\r\n  const [dbTables, setDbTables] = useState(['pictures', 'messages']);\r\n  const [currentSection, setCurrentSection] = useState('admin');\r\n\r\n\r\n  const navItemsDisplay = dbTables.map((table, index) => {\r\n    let menuItemclassName = 'item';\r\n    if (currentSection === table) menuItemclassName += ' active';\r\n    return (\r\n      <a className={menuItemclassName} onClick={() => setCurrentSection(table)}>{table}</a>\r\n    )\r\n  })\r\n\r\n  let contentDisplay = <div>Hello im admin homepage</div>\r\n  if (currentSection !== \"admin\"){\r\n    contentDisplay = dbTables.map((table, index) => {\r\n      if (currentSection === table) {\r\n        return(\r\n          <DBTableRender key={index} fetchUrl={\"/\" + table}/>\r\n        )\r\n      }\r\n    })\r\n  }\r\n    \r\n  let mainMenuItemclassNameName = 'item';\r\n  if (currentSection === \"admin\") mainMenuItemclassNameName += ' active';\r\n\r\n  return(\r\n    <section id=\"admin\">\r\n      <nav>\r\n        <div className=\"ui secondary pointing menu\">\r\n          <a className={mainMenuItemclassNameName} onClick={() => setCurrentSection(\"admin\")}>Admin main</a>\r\n          {navItemsDisplay}\r\n        </div>\r\n      </nav>\r\n      {contentDisplay}\r\n    </section>\r\n  )\r\n}\r\n\r\nfunction DBTableRender(props) {\r\n\r\n    const [items, setItems] = useState([])\r\n    const [columns, setColumns] = useState([])\r\n    const [showForm, setShowForm] = useState(false)\r\n    const [loading, setLoading] = useState(true)\r\n    const [selectedItem, setSelectedItem] = useState(null)\r\n\r\n    useEffect(() => {\r\n        getItems()\r\n    },[])\r\n\r\n    useEffect(() => {\r\n      if (selectedItem !== null) setShowForm(true)\r\n  },[selectedItem])\r\n\r\n\r\n    function getItems()  {\r\n        setLoading(true)\r\n        fetch(props.fetchUrl)\r\n        .then(res => res.text())\r\n        .then(res =>{\r\n          const newItems = JSON.parse(res);\r\n          let columnArray = []\r\n          for (var i in newItems[0]){\r\n            columnArray.push(i)\r\n          }\r\n          setColumns(columnArray)\r\n          setItems(JSON.parse(res));\r\n          window.scrollTo({top:0,behavior:'smooth'})\r\n          setLoading(false)\r\n        })\r\n    }\r\n\r\n    function deleteItem(item) {\r\n\r\n      setLoading(true)\r\n      $.ajax({\r\n        url:'/delete',\r\n        type:'POST',\r\n        data:{path:item.filename}\r\n      }).done(function(res){\r\n        console.log(res)\r\n        $.ajax({\r\n          url:'http://localhost:80/pictures/' + item.picture_id,\r\n          type:'DELETE'\r\n        }).done(function(res) {\r\n          console.log(res)\r\n          getItems();\r\n        })\r\n      })\r\n    }\r\n\r\n    function onFinishFormSubmit() {\r\n      setShowForm(false)\r\n      getItems()\r\n    }\r\n \r\n    const columnsDisplay = columns.map((column, index) => (\r\n        <th key={index} scope=\"col\">\r\n            {column}\r\n        </th>\r\n    ))\r\n\r\n    const itemsDisplay = items.map((item, index) => (\r\n      <tr key={index}>\r\n        {\r\n          columns.map((column, index) => {\r\n\r\n            let cellDisplay = item[column];\r\n            if (column === 'filename') {\r\n                cellDisplay =(\r\n                  <img src={item[column]} width=\"50px\" height=\"50px\"/>\r\n                )\r\n            }\r\n            return(\r\n                <td key={index}>\r\n                  {cellDisplay}\r\n                </td>\r\n              )\r\n          })\r\n        }\r\n        <td>\r\n          <TableRowUserMenu\r\n            item={item}\r\n            deleteItem={deleteItem}\r\n            setSelectedItem={setSelectedItem}\r\n          />\r\n        </td>\r\n      </tr>\r\n    ))\r\n\r\n    let tableDisplay, formDisplay;\r\n    if (showForm === false) {\r\n      let addButtonDisplay;\r\n      if (props.fetchUrl === '/pictures') {\r\n        addButtonDisplay = (\r\n          <a onClick={() => setShowForm(true)}className=\"ui green basic button\">\r\n            <i className=\"plus icon\"></i>\r\n            Lägg till bild\r\n          </a>\r\n        )\r\n      }\r\n\r\n      let loadingDisplay;\r\n      if (loading === true) {\r\n        loadingDisplay = (\r\n          <div class=\"ui active inverted dimmer\">\r\n            <div class=\"ui text loader\"><b>loading...</b></div>\r\n          </div>\r\n      )\r\n      }\r\n\r\n      tableDisplay = (\r\n        <React.Fragment>\r\n          {addButtonDisplay}\r\n          <div className=\"dimmable\">\r\n            {loadingDisplay}\r\n            <table className=\"ui celled table\">\r\n            <thead>\r\n                <tr>\r\n                {columnsDisplay}\r\n                <th>update</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {itemsDisplay}\r\n            </tbody>\r\n            </table>\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    } else {\r\n      console.log(\"selected item on parent\")\r\n      console.log(selectedItem);\r\n      formDisplay = (\r\n        <AddItemForm\r\n          columns={columns}\r\n          selectedItem={selectedItem}\r\n          onFinishFormSubmit={onFinishFormSubmit}\r\n        />\r\n      )\r\n    }\r\n\r\n    return(\r\n      <div className=\"admin-table-container\">\r\n        {tableDisplay}\r\n        {formDisplay}\r\n      </div>\r\n    )\r\n}\r\n\r\nfunction TableRowUserMenu(props) {\r\n\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  function onApprovedDeleteClick() {\r\n    setOpen(false)\r\n\r\n    props.deleteItem(props.item)\r\n  }\r\n  \r\n  return(\r\n    <div className=\"table-row-user-menu\">\r\n      <button className=\"ui icon blue button\" onClick={()=> props.setSelectedItem(props.item)}>\r\n        <i className=\"pencil alternate icon\"></i>\r\n      </button>\r\n        <Modal\r\n          basic\r\n          onClose={() => setOpen(false)}\r\n          onOpen={() => setOpen(true)}\r\n          open={open}\r\n          size='tiny'\r\n          trigger={<Button icon color='red'><Icon name='trash' /></Button>}\r\n        >\r\n          <Header icon>\r\n            <Icon name='trash alternate outline' />\r\n              Ta bort bild\r\n            </Header>\r\n          <Modal.Content>\r\n            <p>\r\n              Vill du radera den här bilden?\r\n            </p>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n              <Icon name='remove' /> Nej\r\n            </Button>\r\n            <Button color='green' inverted onClick={() => onApprovedDeleteClick()}>\r\n              <Icon name='checkmark' /> Ja\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n        </div>\r\n  )\r\n}\r\n\r\nfunction AddItemForm(props) {\r\n\r\n  let initFormData = props.selectedItem !== null ? props.selectedItem : {};\r\n  const [formData, setFormData] = useState(initFormData)\r\n  const [errors, setErrors] = useState([])\r\n\r\n  function onUpdateFormField(obj) {\r\n    const newFormData = {\r\n    ...formData, ...obj\r\n    }\r\n    setFormData(newFormData)\r\n  }\r\n\r\n  function updateFormErrors(obj) {\r\n    if (obj.column) {\r\n      let errorIndex = -1;\r\n      errors.forEach(function(error, index){\r\n        if (error.column === obj.column) {\r\n          errorIndex = index\r\n        }\r\n      })\r\n      let newErrors;\r\n        if (errorIndex > -1) {\r\n          const newErrors = [\r\n            ...errors.slice(0, errorIndex -1), obj,\r\n            ...errors.slice(errorIndex +1, errors.length -1)\r\n            ]\r\n        } else {\r\n          newErrors = [\r\n            ...errors, obj\r\n          ]\r\n        }\r\n      setErrors(newErrors)\r\n    }\r\n  }\r\n\r\n  function onFormSubmit() {\r\n    console.log(formData);\r\n    let ajaxUrl = '/pictures';\r\n    let ajaxType = 'POST';\r\n    if (props.selectedItem !== null) {\r\n      console.log(\"hello what why?\");\r\n      ajaxUrl += '/' + formData.picture_id;\r\n      ajaxType = 'PUT'\r\n    }\r\n\r\n    $.ajax({\r\n      url:ajaxUrl,\r\n      type:ajaxType,\r\n      data: formData\r\n    }).done(function(res) {\r\n      console.log(res)\r\n      props.onFinishFormSubmit()\r\n    })\r\n  }\r\n\r\n  const formFieldsDisplay = props.columns.map ((column, index) => {\r\n    \r\n    let showFormField = true;\r\n    if (column === 'created_at' || column.indexOf('_id') > -1 ) showFormField = false;\r\n    if (showFormField === true) {\r\n      let defaultValue = null;\r\n      if (props.selectedItem !== null) defaultValue = props.selectedItem[column]\r\n      return(\r\n        <FormField \r\n          key={index}\r\n          column={column}\r\n          defaultValue={defaultValue}\r\n          onUpdateFormField={onUpdateFormField}\r\n          updateFormErrors={updateFormErrors}\r\n        />\r\n      )\r\n    }\r\n   \r\n  })\r\n\r\n\r\n  return(\r\n    <div className=\"add-item-form\">\r\n      <div className=\"ui form\">\r\n        {formFieldsDisplay}\r\n        <button className=\"ui button\" onClick={onFormSubmit}>\r\n          {props.selectedItem !== null ? \"Uppdatera bild\" : \"Lägg till Bild\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction FormField(props) {\r\n  \r\n  let initData = props.defaultValue !== null ? props.defaultValue : '';\r\n  const [ data, setData ] = useState(initData)\r\n  const [error, setError] = useState({})\r\n\r\n  useEffect (()=>{\r\n    if (data !== initData) {\r\n      const newError = validateField(data)\r\n      setError(newError)\r\n      if (!newError.msg) {\r\n        let obj = {};\r\n        obj[props.column] = data;\r\n        props.onUpdateFormField(obj)\r\n      }\r\n    }\r\n  },[data])\r\n\r\n  /*useEffect(()=>{\r\n    props.updateFormErrors(error)\r\n  },[error])*/\r\n\r\n  function updateInput(value) {\r\n    console.log('value')\r\n    console.log(value)\r\n    console.log('typeof value')\r\n    console.log(typeof value)\r\n    console.log('value.length')\r\n    console.log(value.length)\r\n    setData(value)\r\n  }\r\n\r\n  function validateField(value) {\r\n    let newError = {};\r\n    if (props.column === 'caption') {\r\n      if (value.length < 3) {\r\n        newError.msg = 'Titel  får inte vara tom'\r\n        newError.column = props.column\r\n      }\r\n    } else if (props.column === 'description') {\r\n      if (value.length < 3) {\r\n        newError.msg = 'Beskrivning får inte vara tom'\r\n        newError.column = props.column\r\n      }\r\n    } else if (props.column === 'price') {\r\n      var numbers = /^[0-9]+$/;\r\n      if(!value.match(numbers)) {\r\n        newError.msg = 'Får inte innehålla bokstäver'\r\n        newError.column = props.column\r\n      }\r\n    } else if (props.column === 'picture_type') {\r\n        console.log('ingallery_type')\r\n        console.log(value.length)\r\n        if (value === '0') {\r\n          newError.msg = 'Välj kategori'\r\n          newError.column = props.column\r\n        }\r\n    }\r\n    return newError;\r\n  }\r\n\r\n  let errorMessageDisplay;\r\n  if (error.msg && error.column === props.column) {\r\n    errorMessageDisplay = (\r\n      <Message negative>\r\n        <p>\r\n          {error.msg}\r\n        </p>\r\n      </Message>\r\n    )\r\n  }\r\n  let formFieldDisplay = (\r\n    <React.Fragment>\r\n      <label>Titel</label>\r\n      <input value={data} onChange={e => updateInput(e.target.value)} placeholder={props.column} type=\"text\"/>\r\n      {errorMessageDisplay}\r\n    </React.Fragment>\r\n  )\r\n\r\n  switch (props.column) {\r\n    case 'filename': \r\n      if (props.defaultValue === null) {\r\n        formFieldDisplay = (\r\n          <div id=\"form-img-container\">\r\n            <div className=\"inner-img-container\">\r\n              <FileUploader updateInput={updateInput}/>\r\n            </div>\r\n          </div>\r\n        )\r\n      } else {\r\n        formFieldDisplay = <div id=\"form-img-container\"><div className=\"inner-img-container\"><img src={props.defaultValue}/></div></div>\r\n      }\r\n    break;  \r\n    case 'picture_type':\r\n      formFieldDisplay = (\r\n        <React.Fragment>\r\n          <label>Gallery</label>\r\n          <select onChange={e => updateInput(e.target.value)}>\r\n            <option value=\"0\">Gallery</option>\r\n            <option selected={props.defaultValue === \"paintings\" ? \"selected\" : \"\"} value=\"paintings\">Tavlor</option>\r\n            <option selected={props.defaultValue === \"sculptures\" ? \"selected\" : \"\"} value=\"sculpture\">Skulpturer</option>   \r\n          </select>\r\n        </React.Fragment>\r\n      )\r\n    break;\r\n    case 'description':\r\n      formFieldDisplay = (\r\n        <React.Fragment>\r\n          <label>Beskrivning</label>\r\n          <textarea onChange={e => updateInput(e.target.value)} rows=\"2\">\r\n            {data}\r\n          </textarea>\r\n        </React.Fragment>\r\n      )\r\n      break;\r\n    case 'price':\r\n      formFieldDisplay = (\r\n        <React.Fragment>\r\n          <label>Pris</label>\r\n          <div className=\"ui right labeled input\">\r\n            <input value={data} onChange={e => updateInput(e.target.value)} type=\"text\"/>\r\n            <div className=\"ui basic label\">\r\n              kr\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    break;\r\n    default:\r\n    formFieldDisplay = (\r\n      <React.Fragment>\r\n        <label>Titel</label>\r\n        <input value={data} onChange={e => updateInput(e.target.value)} placeholder={props.column} type=\"text\"/>\r\n      </React.Fragment>\r\n    )\r\n    break;\r\n  }\r\n\r\n  return(\r\n    <div className=\"field\">\r\n      {formFieldDisplay}\r\n      {errorMessageDisplay}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Admin;",["71","72"],"C:\\Work\\projects\\charlee\\src\\app\\partials\\loader.js",[],"C:\\Work\\projects\\charlee\\src\\app\\partials\\file-uploader.js",["73","74"],"C:\\Work\\projects\\charlee\\src\\app\\gallery\\SubGallery.js",["75","76","77","78","79","80","81","82"],"import React, { useEffect, useState, Suspense, lazy } from 'react';\r\nimport { SRLWrapper } from \"simple-react-lightbox\";\r\nimport {breakArrayIntoChunksHelper} from '../helpers';\r\nimport './SubGallery.css';\r\n\r\nfunction SubGallery(props) {\r\n \r\n    const [pictures, setPictures] = useState([])\r\n    const [chunksArray, setChunksArray ] = useState([])\r\n    const [windowSize, setWindowSize] = useState(window.innerWidth > 577 ? 'normal' :  'small')\r\n    const [ isBlurred, setIsBlurred ] = useState(false); \r\n  \r\n    useEffect(() => {\r\n      getPictures()\r\n      window.addEventListener('resize', onWindowResize)\r\n    },[])\r\n\r\n    useEffect(() => {\r\n      console.log(windowSize)\r\n      handelPictures(pictures)\r\n    },[windowSize])\r\n\r\n    function onWindowResize() {\r\n      let currentWindowSize = window.innerWidth > 577 ? 'normal' :  'small';\r\n      if (currentWindowSize !== windowSize) {\r\n        setWindowSize(currentWindowSize)\r\n      }\r\n    }\r\n  \r\n    function getPictures() {\r\n      fetch('/pictures/' + props.pictureType)\r\n      .then(res => res.text())\r\n      .then(res =>{\r\n        handelPictures(JSON.parse(res))\r\n        setPictures(JSON.parse(res))\r\n      })\r\n    }\r\n\r\n    function handelPictures(pics) {\r\n      let numChunks = 2;\r\n      if (window.innerWidth < 577) numChunks = 1;\r\n      const newPictures = breakArrayIntoChunksHelper(numChunks,pics)\r\n      setChunksArray(newPictures);\r\n    }\r\n  \r\n    const galleryDisplay = chunksArray.map((subArray, subIndex) => (\r\n        <SubGalleryRow key={subIndex} subArray={subArray}/>\r\n    ))\r\n  \r\n    const options={\r\n      thumbnails:{\r\n        showThumbnails:false\r\n      },\r\n      buttons: {\r\n        showDownloadButton: false\r\n      }\r\n    }\r\n    \r\n    const callbacks = {\r\n      onSlideChange: object => console.log(object),\r\n      onLightboxOpened: object => setIsBlurred(true),\r\n      onLightboxClosed: object => setIsBlurred(false),\r\n      onCountSlides: object => console.log(object)\r\n  };\r\n  \r\n    let galleryStyle;\r\n    if (isBlurred){\r\n      galleryStyle = {\r\n        filter:\"blur(5px)\"\r\n      }\r\n    }\r\n\r\n    return(\r\n        <div className=\"sub-gallery\">\r\n          <SRLWrapper \r\n            callbacks={callbacks}\r\n            options={options}>\r\n              <div id=\"gallery-pictures\" style={galleryStyle}>{galleryDisplay}</div>\r\n          </SRLWrapper>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  function SubGalleryRow(props) {\r\n    \r\n    const [hovered, setHovered] = useState(null)\r\n\r\n    const SubGalleryPictureDisplay = props.subArray.map((picture, index) => (\r\n        <SubGalleryPicture \r\n            key={index} \r\n            picture={picture}\r\n            hovered={hovered}\r\n            setHovered={setHovered}\r\n        />\r\n    ))  \r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            {SubGalleryPictureDisplay}\r\n        </div>\r\n    )\r\n  }\r\n\r\n  function SubGalleryPicture(props) {\r\n\r\n    const picture = props.picture;\r\n    let initContainerWidth = (window.innerWidth*0.45) -30.81\r\n    if (window.innerWidth < 577) initContainerWidth = (window.innerWidth*0.9) -30.81\r\n    const [containerWidth, setContainerWidth] = useState(initContainerWidth)\r\n    const [loadedImgWidth,setLoadedImgWidth] = useState(null)\r\n    const [loadedImgHeight, setLoadedImgHeight] = useState(null)\r\n    const [imgWidth, setImgWidth] = useState(null)\r\n    const [imgHeight, setImgHeight] = useState(null)\r\n    const [imgTop, setImgTop] = useState(null)\r\n    const [imgLeft, setImgLeft] = useState(null)\r\n    const [isHoovered, setIsHoovered] = useState(false)\r\n    const [differential, setDifferential] = useState(null)\r\n    const [isResized, setIsResized] = useState(false)\r\n\r\n    let resizeTimeout;\r\n\r\n    useEffect(() => {\r\n      window.addEventListener('resize', onWindowResize);\r\n    },[])\r\n\r\n    useEffect(() => {\r\n      updateImgDimensions();\r\n    },[containerWidth])\r\n\r\n    useEffect(() => {\r\n      if (loadedImgHeight !== null && loadedImgWidth !== null) updateImgDimensions();\r\n    },[loadedImgHeight, loadedImgWidth])\r\n  \r\n    function onWindowResize(){\r\n      setIsResized(true)\r\n      clearTimeout(resizeTimeout);\r\n      resizeTimeout = setTimeout(resizedw, 500);\r\n      let initContainerWidth = (window.innerWidth*0.45) -30.81\r\n      if (window.innerWidth < 577) initContainerWidth = (window.innerWidth*0.9) -30.81\r\n      setContainerWidth(initContainerWidth)\r\n    }\r\n\r\n    function resizedw(){\r\n      setIsResized(false)\r\n      console.log(\"Haven't resized in 500ms!\");\r\n    }\r\n\r\n    function onImgLoad(e) {\r\n      setLoadedImgHeight(e.target.naturalHeight)\r\n      setLoadedImgWidth(e.target.naturalWidth)\r\n    }\r\n\r\n    function updateImgDimensions() {\r\n      \r\n      let diff, adjImgTop, adjImgLeft;\r\n      if (loadedImgWidth > loadedImgHeight) {\r\n        diff = loadedImgHeight / containerWidth\r\n        adjImgLeft = ((loadedImgWidth /diff) - containerWidth) / 2\r\n      }\r\n      else {\r\n        diff = loadedImgWidth / containerWidth\r\n        adjImgTop = ((loadedImgHeight /diff) - containerWidth) / 2\r\n      }\r\n\r\n      setImgHeight(loadedImgHeight / diff)\r\n      setImgWidth(loadedImgWidth /diff) \r\n      setImgLeft(adjImgLeft)\r\n      setImgTop(adjImgTop)\r\n      setDifferential(diff)\r\n    }\r\n\r\n    let imgStyle = {}, imgClassName = '';\r\n    if (imgHeight !== null) {\r\n      let currentWidth = imgWidth, currentHeight = imgHeight, currentTop = imgTop, currentLeft = imgLeft;\r\n      if (isHoovered === true) {\r\n        currentWidth = loadedImgWidth /(differential * 0.9);\r\n        currentHeight = loadedImgHeight /(differential * 0.9);\r\n        if (currentWidth > currentHeight) currentLeft = ((loadedImgWidth /(differential * 0.9)) - containerWidth) / 2;\r\n        else currentTop = ((loadedImgHeight /(differential * 0.9)) - containerWidth) / 2;\r\n      }\r\n      imgStyle = {\r\n        width:currentWidth,\r\n        height:currentHeight,\r\n        left:'-' + currentLeft + 'px',\r\n        top:'-' + currentTop + 'px'\r\n      }\r\n      imgClassName = isResized === false ? 'loaded' : ''\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"box\">\r\n          <div className=\"inner-box\" onMouseEnter={()=> setIsHoovered(true)} onMouseLeave={()=> setIsHoovered(false)}>\r\n            <img style={imgStyle} className={imgClassName} src={picture.filename} onLoad={e => onImgLoad(e)}/>\r\n            <div className=\"info-container\">\r\n                <div className=\"left-container\">\r\n                    <h2>\r\n                        {picture.caption}\r\n                    </h2>\r\n                    <p>\r\n                        {picture.description}\r\n                    </p>\r\n                </div>\r\n                <div className=\"right-container\">\r\n                <span>\r\n                    {picture.price.split(\"kr\")[0]}\r\n                    <span style={{marginLeft:\"3px\"}}>kr</span>\r\n                </span>\r\n                </div>\r\n            </div>  \r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  export default SubGallery;",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"83","replacedBy":"87"},{"ruleId":"85","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":46,"column":7,"nodeType":"91","messageId":"92","endLine":46,"endColumn":21},{"ruleId":"93","severity":1,"message":"94","line":105,"column":13,"nodeType":"95","endLine":105,"endColumn":74},{"ruleId":"89","severity":1,"message":"96","line":113,"column":12,"nodeType":"91","messageId":"92","endLine":113,"endColumn":21},{"ruleId":"93","severity":1,"message":"94","line":128,"column":13,"nodeType":"95","endLine":128,"endColumn":72},{"ruleId":"89","severity":1,"message":"97","line":1,"column":38,"nodeType":"91","messageId":"92","endLine":1,"endColumn":46},{"ruleId":"89","severity":1,"message":"98","line":1,"column":48,"nodeType":"91","messageId":"92","endLine":1,"endColumn":52},{"ruleId":"89","severity":1,"message":"99","line":6,"column":10,"nodeType":"91","messageId":"92","endLine":6,"endColumn":20},{"ruleId":"89","severity":1,"message":"100","line":7,"column":9,"nodeType":"91","messageId":"92","endLine":7,"endColumn":35},{"ruleId":"89","severity":1,"message":"101","line":8,"column":23,"nodeType":"91","messageId":"92","endLine":8,"endColumn":29},{"ruleId":"93","severity":1,"message":"94","line":173,"column":48,"nodeType":"95","endLine":173,"endColumn":85},{"ruleId":"102","severity":1,"message":"103","line":231,"column":26,"nodeType":"104","messageId":"105","endLine":231,"endColumn":27,"suggestions":"106"},{"ruleId":"102","severity":1,"message":"103","line":231,"column":51,"nodeType":"104","messageId":"105","endLine":231,"endColumn":52,"suggestions":"107"},{"ruleId":"89","severity":1,"message":"108","line":11,"column":20,"nodeType":"91","messageId":"92","endLine":11,"endColumn":31},{"ruleId":"109","severity":1,"message":"110","line":19,"column":7,"nodeType":"95","endLine":19,"endColumn":81},{"ruleId":"111","severity":1,"message":"112","line":25,"column":50,"nodeType":"113","messageId":"114","endLine":25,"endColumn":52},{"ruleId":"109","severity":1,"message":"110","line":41,"column":11,"nodeType":"95","endLine":41,"endColumn":95},{"ruleId":"115","severity":1,"message":"116","line":60,"column":7,"nodeType":"117","endLine":60,"endColumn":9,"suggestions":"118"},{"ruleId":"93","severity":1,"message":"94","line":122,"column":19,"nodeType":"95","endLine":122,"endColumn":71},{"ruleId":"109","severity":1,"message":"110","line":147,"column":11,"nodeType":"95","endLine":147,"endColumn":81},{"ruleId":"89","severity":1,"message":"119","line":270,"column":17,"nodeType":"91","messageId":"92","endLine":270,"endColumn":26},{"ruleId":"111","severity":1,"message":"112","line":303,"column":64,"nodeType":"113","messageId":"114","endLine":303,"endColumn":66},{"ruleId":"115","severity":1,"message":"120","line":352,"column":5,"nodeType":"117","endLine":352,"endColumn":11,"suggestions":"121"},{"ruleId":"93","severity":1,"message":"94","line":426,"column":94,"nodeType":"95","endLine":426,"endColumn":125},{"ruleId":"83","replacedBy":"122"},{"ruleId":"85","replacedBy":"123"},{"ruleId":"115","severity":1,"message":"124","line":15,"column":7,"nodeType":"117","endLine":15,"endColumn":13,"suggestions":"125"},{"ruleId":"89","severity":1,"message":"126","line":50,"column":9,"nodeType":"91","messageId":"92","endLine":50,"endColumn":22},{"ruleId":"89","severity":1,"message":"97","line":1,"column":38,"nodeType":"91","messageId":"92","endLine":1,"endColumn":46},{"ruleId":"89","severity":1,"message":"98","line":1,"column":48,"nodeType":"91","messageId":"92","endLine":1,"endColumn":52},{"ruleId":"115","severity":1,"message":"127","line":16,"column":7,"nodeType":"117","endLine":16,"endColumn":9,"suggestions":"128"},{"ruleId":"115","severity":1,"message":"129","line":21,"column":7,"nodeType":"117","endLine":21,"endColumn":19,"suggestions":"130"},{"ruleId":"115","severity":1,"message":"131","line":125,"column":7,"nodeType":"117","endLine":125,"endColumn":9,"suggestions":"132"},{"ruleId":"115","severity":1,"message":"133","line":129,"column":7,"nodeType":"117","endLine":129,"endColumn":23,"suggestions":"134"},{"ruleId":"115","severity":1,"message":"133","line":133,"column":7,"nodeType":"117","endLine":133,"endColumn":40,"suggestions":"135"},{"ruleId":"93","severity":1,"message":"94","line":195,"column":13,"nodeType":"95","endLine":195,"endColumn":111},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],["136"],["137"],"no-unused-vars","'overlayDisplay' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'nextIndex' is assigned a value but never used.","'Suspense' is defined but never used.","'lazy' is defined but never used.","'SRLWrapper' is defined but never used.","'breakArrayIntoChunksHelper' is defined but never used.","'Switch' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["138","139"],["140","141"],"'setDbTables' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getItems'. Either include it or remove the dependency array.","ArrayExpression",["142"],"'newErrors' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'initData', 'props', and 'validateField'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["143"],["136"],["137"],"React Hook useEffect has a missing dependency: 'uploadFile'. Either include it or remove the dependency array.",["144"],"'buttonDisplay' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPictures' and 'onWindowResize'. Either include them or remove the dependency array.",["145"],"React Hook useEffect has a missing dependency: 'pictures'. Either include it or remove the dependency array.",["146"],"React Hook useEffect has a missing dependency: 'onWindowResize'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'updateImgDimensions'. Either include it or remove the dependency array.",["148"],["149"],"no-global-assign","no-unsafe-negation",{"messageId":"150","fix":"151","desc":"152"},{"messageId":"153","fix":"154","desc":"155"},{"messageId":"150","fix":"156","desc":"152"},{"messageId":"153","fix":"157","desc":"155"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"removeEscape",{"range":"174","text":"175"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"176","text":"177"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"178","text":"175"},{"range":"179","text":"177"},"Update the dependencies array to be: [getItems]",{"range":"180","text":"181"},"Update the dependencies array to be: [data, initData, props, validateField]",{"range":"182","text":"183"},"Update the dependencies array to be: [file, uploadFile]",{"range":"184","text":"185"},"Update the dependencies array to be: [getPictures, onWindowResize]",{"range":"186","text":"187"},"Update the dependencies array to be: [pictures, windowSize]",{"range":"188","text":"189"},"Update the dependencies array to be: [onWindowResize]",{"range":"190","text":"191"},"Update the dependencies array to be: [containerWidth, updateImgDimensions]",{"range":"192","text":"193"},"Update the dependencies array to be: [loadedImgHeight, loadedImgWidth, updateImgDimensions]",{"range":"194","text":"195"},[5628,5629],"",[5628,5628],"\\",[5653,5654],[5653,5653],[1781,1783],"[getItems]",[9360,9366],"[data, initData, props, validateField]",[559,565],"[file, uploadFile]",[615,617],"[getPictures, onWindowResize]",[714,726],"[pictures, windowSize]",[3753,3755],"[onWindowResize]",[3819,3835],"[containerWidth, updateImgDimensions]",[3956,3989],"[loadedImgHeight, loadedImgWidth, updateImgDimensions]"]